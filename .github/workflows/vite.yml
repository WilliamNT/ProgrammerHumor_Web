n this page 
Sidebar Navigation
Guide
Why Vite
Getting Started
Features
CLI
Using Plugins
Dependency Pre-Bundling
Static Asset Handling
Building for Production
Deploying a Static Site
Env Variables and Modes
Server-Side Rendering (SSR)
Backend Integration
Comparisons
Troubleshooting
Philosophy
Migration from v3
APIs
Plugin API
HMR API
JavaScript API
Config Reference
Deploying a Static Site
The following guides are based on some shared assumptions:

You are using the default build output location (dist). This location can be changed using build.outDir, and you can extrapolate instructions from these guides in that case.
You are using npm. You can use equivalent commands to run the scripts if you are using Yarn or other package managers.
Vite is installed as a local dev dependency in your project, and you have setup the following npm scripts:
json
{
  "scripts": {
    "build": "vite build",
    "preview": "vite preview"
  }
}
It is important to note that vite preview is intended for previewing the build locally and not meant as a production server.

NOTE
These guides provide instructions for performing a static deployment of your Vite site. Vite also supports Server Side Rendering. SSR refers to front-end frameworks that support running the same application in Node.js, pre-rendering it to HTML, and finally hydrating it on the client. Check out the SSR Guide to learn about this feature. On the other hand, if you are looking for integration with traditional server-side frameworks, check out the Backend Integration guide instead.

Building the App

You may run npm run build command to build the app.

bash
$ npm run build
By default, the build output will be placed at dist. You may deploy this dist folder to any of your preferred platforms.

Testing the App Locally
Once you've built the app, you may test it locally by running npm run preview command.

bash
$ npm run build
$ npm run preview
The vite preview command will boot up a local static web server that serves the files from dist at http://localhost:4173. It's an easy way to check if the production build looks OK in your local environment.

You may configure the port of the server by passing the --port flag as an argument.

json
{
  "scripts": {
    "preview": "vite preview --port 8080"
  }
}
Now the preview command will launch the server at http://localhost:8080.

GitHub Pages

Set the correct base in vite.config.js.

If you are deploying to https://<USERNAME>.github.io/, you can omit base as it defaults to '/'.

If you are deploying to https://<USERNAME>.github.io/<REPO>/, for example your repository is at https://github.com/<USERNAME>/<REPO>, then set base to '/<REPO>/'.

Go to your GitHub Pages configuration in the repository settings page and choose the source of deployment as "GitHub Actions", this will lead you to create a workflow that builds and deploys your project, a sample workflow that installs dependencies and builds using npm is provided:

yml
# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
